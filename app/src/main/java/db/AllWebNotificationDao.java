package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALL_WEB_NOTIFICATION".
*/
public class AllWebNotificationDao extends AbstractDao<AllWebNotification, Void> {

    public static final String TABLENAME = "ALL_WEB_NOTIFICATION";

    /**
     * Properties of entity AllWebNotification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Recognition_id = new Property(1, String.class, "recognition_id", false, "RECOGNITION_ID");
        public final static Property Image_url = new Property(2, String.class, "image_url", false, "IMAGE_URL");
        public final static Property NotificationTypeId = new Property(3, String.class, "NotificationTypeId", false, "NOTIFICATION_TYPE_ID");
        public final static Property Is_story_status = new Property(4, String.class, "is_story_status", false, "IS_STORY_STATUS");
        public final static Property Messagetext = new Property(5, String.class, "messagetext", false, "MESSAGETEXT");
        public final static Property Recognize_date = new Property(6, String.class, "recognize_date", false, "RECOGNIZE_DATE");
    };


    public AllWebNotificationDao(DaoConfig config) {
        super(config);
    }
    
    public AllWebNotificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALL_WEB_NOTIFICATION\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"RECOGNITION_ID\" TEXT," + // 1: recognition_id
                "\"IMAGE_URL\" TEXT," + // 2: image_url
                "\"NOTIFICATION_TYPE_ID\" TEXT," + // 3: NotificationTypeId
                "\"IS_STORY_STATUS\" TEXT," + // 4: is_story_status
                "\"MESSAGETEXT\" TEXT," + // 5: messagetext
                "\"RECOGNIZE_DATE\" TEXT);"); // 6: recognize_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALL_WEB_NOTIFICATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AllWebNotification entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String recognition_id = entity.getRecognition_id();
        if (recognition_id != null) {
            stmt.bindString(2, recognition_id);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(3, image_url);
        }
 
        String NotificationTypeId = entity.getNotificationTypeId();
        if (NotificationTypeId != null) {
            stmt.bindString(4, NotificationTypeId);
        }
 
        String is_story_status = entity.getIs_story_status();
        if (is_story_status != null) {
            stmt.bindString(5, is_story_status);
        }
 
        String messagetext = entity.getMessagetext();
        if (messagetext != null) {
            stmt.bindString(6, messagetext);
        }
 
        String recognize_date = entity.getRecognize_date();
        if (recognize_date != null) {
            stmt.bindString(7, recognize_date);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AllWebNotification readEntity(Cursor cursor, int offset) {
        AllWebNotification entity = new AllWebNotification( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // recognition_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NotificationTypeId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // is_story_status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // messagetext
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // recognize_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AllWebNotification entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRecognition_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNotificationTypeId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_story_status(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessagetext(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRecognize_date(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AllWebNotification entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AllWebNotification entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
