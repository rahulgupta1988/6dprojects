package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "COUNT_RG".
 */
public class CountRGDao extends AbstractDao<CountRG, Void> {

    public static final String TABLENAME = "COUNT_RG";

    /**
     * Properties of entity CountRG.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Grecognition = new Property(0, String.class, "grecognition", false, "GRECOGNITION");
        public final static Property Rrecognition = new Property(1, String.class, "rrecognition", false, "RRECOGNITION");
        public final static Property Tgrecognition = new Property(2, String.class, "tgrecognition", false, "TGRECOGNITION");
        public final static Property Trrecognition = new Property(3, String.class, "trrecognition", false, "TRRECOGNITION");
    }

    ;


    public CountRGDao(DaoConfig config) {
        super(config);
    }

    public CountRGDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNT_RG\" (" + //
                "\"GRECOGNITION\" TEXT," + // 0: grecognition
                "\"RRECOGNITION\" TEXT," + // 1: rrecognition
                "\"TGRECOGNITION\" TEXT," + // 2: tgrecognition
                "\"TRRECOGNITION\" TEXT);"); // 3: trrecognition
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNT_RG\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, CountRG entity) {
        stmt.clearBindings();

        String grecognition = entity.getGrecognition();
        if (grecognition != null) {
            stmt.bindString(1, grecognition);
        }

        String rrecognition = entity.getRrecognition();
        if (rrecognition != null) {
            stmt.bindString(2, rrecognition);
        }

        String tgrecognition = entity.getTgrecognition();
        if (tgrecognition != null) {
            stmt.bindString(3, tgrecognition);
        }

        String trrecognition = entity.getTrrecognition();
        if (trrecognition != null) {
            stmt.bindString(4, trrecognition);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public CountRG readEntity(Cursor cursor, int offset) {
        CountRG entity = new CountRG( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // grecognition
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // rrecognition
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tgrecognition
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // trrecognition
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, CountRG entity, int offset) {
        entity.setGrecognition(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRrecognition(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTgrecognition(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTrrecognition(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(CountRG entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(CountRG entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
