package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BULLETIN_LIST".
 */
public class BulletinListDao extends AbstractDao<BulletinList, Void> {

    public static final String TABLENAME = "BULLETIN_LIST";

    /**
     * Properties of entity BulletinList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Postedbyuser = new Property(0, String.class, "postedbyuser", false, "POSTEDBYUSER");
        public final static Property Postbyemail = new Property(1, String.class, "postbyemail", false, "POSTBYEMAIL");
        public final static Property Details = new Property(2, String.class, "details", false, "DETAILS");
        public final static Property Create_date = new Property(3, String.class, "create_date", false, "CREATE_DATE");
        public final static Property Groupemail = new Property(4, String.class, "groupemail", false, "GROUPEMAIL");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Fileurl = new Property(6, String.class, "fileurl", false, "FILEURL");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
    }

    ;


    public BulletinListDao(DaoConfig config) {
        super(config);
    }

    public BulletinListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"BULLETIN_LIST\" (" + //
                "\"POSTEDBYUSER\" TEXT," + // 0: postedbyuser
                "\"POSTBYEMAIL\" TEXT," + // 1: postbyemail
                "\"DETAILS\" TEXT," + // 2: details
                "\"CREATE_DATE\" TEXT," + // 3: create_date
                "\"GROUPEMAIL\" TEXT," + // 4: groupemail
                "\"TYPE\" TEXT," + // 5: type
                "\"FILEURL\" TEXT," + // 6: fileurl
                "\"URL\" TEXT);"); // 7: url
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BULLETIN_LIST\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, BulletinList entity) {
        stmt.clearBindings();

        String postedbyuser = entity.getPostedbyuser();
        if (postedbyuser != null) {
            stmt.bindString(1, postedbyuser);
        }

        String postbyemail = entity.getPostbyemail();
        if (postbyemail != null) {
            stmt.bindString(2, postbyemail);
        }

        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(3, details);
        }

        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(4, create_date);
        }

        String groupemail = entity.getGroupemail();
        if (groupemail != null) {
            stmt.bindString(5, groupemail);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }

        String fileurl = entity.getFileurl();
        if (fileurl != null) {
            stmt.bindString(7, fileurl);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public BulletinList readEntity(Cursor cursor, int offset) {
        BulletinList entity = new BulletinList( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // postedbyuser
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // postbyemail
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // details
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // create_date
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupemail
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fileurl
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // url
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, BulletinList entity, int offset) {
        entity.setPostedbyuser(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPostbyemail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetails(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreate_date(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupemail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFileurl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(BulletinList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(BulletinList entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
