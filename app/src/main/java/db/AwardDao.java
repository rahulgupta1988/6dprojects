package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "AWARD".
 */
public class AwardDao extends AbstractDao<Award, String> {

    public static final String TABLENAME = "AWARD";

    /**
     * Properties of entity Award.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Awardid = new Property(0, String.class, "awardid", true, "AWARDID");
        public final static Property Awardname = new Property(1, String.class, "awardname", false, "AWARDNAME");
        public final static Property Awardicon = new Property(2, String.class, "awardicon", false, "AWARDICON");
        public final static Property Isactive = new Property(3, String.class, "isactive", false, "ISACTIVE");
    }

    ;

    private DaoSession daoSession;


    public AwardDao(DaoConfig config) {
        super(config);
    }

    public AwardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"AWARD\" (" + //
                "\"AWARDID\" TEXT PRIMARY KEY NOT NULL ," + // 0: awardid
                "\"AWARDNAME\" TEXT," + // 1: awardname
                "\"AWARDICON\" TEXT," + // 2: awardicon
                "\"ISACTIVE\" TEXT);"); // 3: isactive
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AWARD\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Award entity) {
        stmt.clearBindings();

        String awardid = entity.getAwardid();
        if (awardid != null) {
            stmt.bindString(1, awardid);
        }

        String awardname = entity.getAwardname();
        if (awardname != null) {
            stmt.bindString(2, awardname);
        }

        String awardicon = entity.getAwardicon();
        if (awardicon != null) {
            stmt.bindString(3, awardicon);
        }

        String isactive = entity.getIsactive();
        if (isactive != null) {
            stmt.bindString(4, isactive);
        }
    }

    @Override
    protected void attachEntity(Award entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Award readEntity(Cursor cursor, int offset) {
        Award entity = new Award( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // awardid
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // awardname
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // awardicon
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // isactive
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Award entity, int offset) {
        entity.setAwardid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAwardname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAwardicon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsactive(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(Award entity, long rowId) {
        return entity.getAwardid();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(Award entity) {
        if (entity != null) {
            return entity.getAwardid();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
