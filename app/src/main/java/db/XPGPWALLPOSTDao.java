package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "XPGPWALLPOST".
 */
public class XPGPWALLPOSTDao extends AbstractDao<XPGPWALLPOST, String> {

    public static final String TABLENAME = "XPGPWALLPOST";

    /**
     * Properties of entity XPGPWALLPOST.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Gpostid = new Property(0, String.class, "gpostid", true, "GPOSTID");
        public final static Property Gid = new Property(1, String.class, "gid", false, "GID");
        public final static Property Details = new Property(2, String.class, "details", false, "DETAILS");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Userid = new Property(4, String.class, "userid", false, "USERID");
        public final static Property Event_date = new Property(5, String.class, "event_date", false, "EVENT_DATE");
        public final static Property Isxpress = new Property(6, String.class, "isxpress", false, "ISXPRESS");
        public final static Property Taguserid = new Property(7, String.class, "taguserid", false, "TAGUSERID");
        public final static Property Tabusername = new Property(8, String.class, "tabusername", false, "TABUSERNAME");
        public final static Property Nominee_imageurl = new Property(9, String.class, "nominee_imageurl", false, "NOMINEE_IMAGEURL");
        public final static Property Nominee_designation = new Property(10, String.class, "nominee_designation", false, "NOMINEE_DESIGNATION");
        public final static Property Nominator_name = new Property(11, String.class, "nominator_name", false, "NOMINATOR_NAME");
        public final static Property Likes = new Property(12, String.class, "likes", false, "LIKES");
        public final static Property Comments = new Property(13, String.class, "comments", false, "COMMENTS");
        public final static Property Tagcount = new Property(14, String.class, "tagcount", false, "TAGCOUNT");
        public final static Property Subject = new Property(15, String.class, "subject", false, "SUBJECT");
        public final static Property Url = new Property(16, String.class, "url", false, "URL");
        public final static Property Devicetype = new Property(17, String.class, "devicetype", false, "DEVICETYPE");
        public final static Property Vcount = new Property(18, String.class, "vcount", false, "VCOUNT");
        public final static Property Themeid = new Property(19, String.class, "themeid", false, "THEMEID");
    }

    ;


    public XPGPWALLPOSTDao(DaoConfig config) {
        super(config);
    }

    public XPGPWALLPOSTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"XPGPWALLPOST\" (" + //
                "\"GPOSTID\" TEXT PRIMARY KEY NOT NULL ," + // 0: gpostid
                "\"GID\" TEXT," + // 1: gid
                "\"DETAILS\" TEXT," + // 2: details
                "\"TYPE\" TEXT," + // 3: type
                "\"USERID\" TEXT," + // 4: userid
                "\"EVENT_DATE\" TEXT," + // 5: event_date
                "\"ISXPRESS\" TEXT," + // 6: isxpress
                "\"TAGUSERID\" TEXT," + // 7: taguserid
                "\"TABUSERNAME\" TEXT," + // 8: tabusername
                "\"NOMINEE_IMAGEURL\" TEXT," + // 9: nominee_imageurl
                "\"NOMINEE_DESIGNATION\" TEXT," + // 10: nominee_designation
                "\"NOMINATOR_NAME\" TEXT," + // 11: nominator_name
                "\"LIKES\" TEXT," + // 12: likes
                "\"COMMENTS\" TEXT," + // 13: comments
                "\"TAGCOUNT\" TEXT," + // 14: tagcount
                "\"SUBJECT\" TEXT," + // 15: subject
                "\"URL\" TEXT," + // 16: url
                "\"DEVICETYPE\" TEXT," + // 17: devicetype
                "\"VCOUNT\" TEXT," + // 18: vcount
                "\"THEMEID\" TEXT);"); // 19: themeid
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XPGPWALLPOST\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, XPGPWALLPOST entity) {
        stmt.clearBindings();

        String gpostid = entity.getGpostid();
        if (gpostid != null) {
            stmt.bindString(1, gpostid);
        }

        String gid = entity.getGid();
        if (gid != null) {
            stmt.bindString(2, gid);
        }

        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(3, details);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }

        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(5, userid);
        }

        String event_date = entity.getEvent_date();
        if (event_date != null) {
            stmt.bindString(6, event_date);
        }

        String isxpress = entity.getIsxpress();
        if (isxpress != null) {
            stmt.bindString(7, isxpress);
        }

        String taguserid = entity.getTaguserid();
        if (taguserid != null) {
            stmt.bindString(8, taguserid);
        }

        String tabusername = entity.getTabusername();
        if (tabusername != null) {
            stmt.bindString(9, tabusername);
        }

        String nominee_imageurl = entity.getNominee_imageurl();
        if (nominee_imageurl != null) {
            stmt.bindString(10, nominee_imageurl);
        }

        String nominee_designation = entity.getNominee_designation();
        if (nominee_designation != null) {
            stmt.bindString(11, nominee_designation);
        }

        String nominator_name = entity.getNominator_name();
        if (nominator_name != null) {
            stmt.bindString(12, nominator_name);
        }

        String likes = entity.getLikes();
        if (likes != null) {
            stmt.bindString(13, likes);
        }

        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(14, comments);
        }

        String tagcount = entity.getTagcount();
        if (tagcount != null) {
            stmt.bindString(15, tagcount);
        }

        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(16, subject);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(17, url);
        }

        String devicetype = entity.getDevicetype();
        if (devicetype != null) {
            stmt.bindString(18, devicetype);
        }

        String vcount = entity.getVcount();
        if (vcount != null) {
            stmt.bindString(19, vcount);
        }

        String themeid = entity.getThemeid();
        if (themeid != null) {
            stmt.bindString(20, themeid);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public XPGPWALLPOST readEntity(Cursor cursor, int offset) {
        XPGPWALLPOST entity = new XPGPWALLPOST( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // gpostid
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gid
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // details
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userid
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // event_date
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isxpress
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // taguserid
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tabusername
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nominee_imageurl
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // nominee_designation
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nominator_name
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // likes
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // comments
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // tagcount
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // subject
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // url
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // devicetype
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // vcount
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // themeid
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, XPGPWALLPOST entity, int offset) {
        entity.setGpostid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetails(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEvent_date(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsxpress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTaguserid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTabusername(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNominee_imageurl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNominee_designation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNominator_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLikes(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setComments(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTagcount(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSubject(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUrl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDevicetype(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setVcount(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setThemeid(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(XPGPWALLPOST entity, long rowId) {
        return entity.getGpostid();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(XPGPWALLPOST entity) {
        if (entity != null) {
            return entity.getGpostid();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
