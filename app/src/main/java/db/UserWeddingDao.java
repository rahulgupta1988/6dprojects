package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER_WEDDING".
 */
public class UserWeddingDao extends AbstractDao<UserWedding, Void> {

    public static final String TABLENAME = "USER_WEDDING";

    /**
     * Properties of entity UserWedding.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Userid = new Property(0, String.class, "userid", false, "USERID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Dob = new Property(2, String.class, "dob", false, "DOB");
        public final static Property Doj = new Property(3, String.class, "doj", false, "DOJ");
        public final static Property Dow = new Property(4, String.class, "dow", false, "DOW");
        public final static Property Image_url = new Property(5, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Issubcribe = new Property(6, String.class, "issubcribe", false, "ISSUBCRIBE");
        public final static Property Isbirthday_subscribe = new Property(7, String.class, "isbirthday_subscribe", false, "ISBIRTHDAY_SUBSCRIBE");
        public final static Property Iswork_subscribe = new Property(8, String.class, "iswork_subscribe", false, "ISWORK_SUBSCRIBE");
        public final static Property Iswedding_subscribe = new Property(9, String.class, "iswedding_subscribe", false, "ISWEDDING_SUBSCRIBE");
    }

    ;


    public UserWeddingDao(DaoConfig config) {
        super(config);
    }

    public UserWeddingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_WEDDING\" (" + //
                "\"USERID\" TEXT," + // 0: userid
                "\"NAME\" TEXT," + // 1: name
                "\"DOB\" TEXT," + // 2: dob
                "\"DOJ\" TEXT," + // 3: doj
                "\"DOW\" TEXT," + // 4: dow
                "\"IMAGE_URL\" TEXT," + // 5: image_url
                "\"ISSUBCRIBE\" TEXT," + // 6: issubcribe
                "\"ISBIRTHDAY_SUBSCRIBE\" TEXT," + // 7: isbirthday_subscribe
                "\"ISWORK_SUBSCRIBE\" TEXT," + // 8: iswork_subscribe
                "\"ISWEDDING_SUBSCRIBE\" TEXT);"); // 9: iswedding_subscribe
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_WEDDING\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserWedding entity) {
        stmt.clearBindings();

        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String dob = entity.getDob();
        if (dob != null) {
            stmt.bindString(3, dob);
        }

        String doj = entity.getDoj();
        if (doj != null) {
            stmt.bindString(4, doj);
        }

        String dow = entity.getDow();
        if (dow != null) {
            stmt.bindString(5, dow);
        }

        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(6, image_url);
        }

        String issubcribe = entity.getIssubcribe();
        if (issubcribe != null) {
            stmt.bindString(7, issubcribe);
        }

        String isbirthday_subscribe = entity.getIsbirthday_subscribe();
        if (isbirthday_subscribe != null) {
            stmt.bindString(8, isbirthday_subscribe);
        }

        String iswork_subscribe = entity.getIswork_subscribe();
        if (iswork_subscribe != null) {
            stmt.bindString(9, iswork_subscribe);
        }

        String iswedding_subscribe = entity.getIswedding_subscribe();
        if (iswedding_subscribe != null) {
            stmt.bindString(10, iswedding_subscribe);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public UserWedding readEntity(Cursor cursor, int offset) {
        UserWedding entity = new UserWedding( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userid
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dob
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // doj
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dow
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image_url
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // issubcribe
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isbirthday_subscribe
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // iswork_subscribe
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // iswedding_subscribe
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, UserWedding entity, int offset) {
        entity.setUserid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDob(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDoj(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDow(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage_url(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIssubcribe(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsbirthday_subscribe(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIswork_subscribe(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIswedding_subscribe(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(UserWedding entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(UserWedding entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
