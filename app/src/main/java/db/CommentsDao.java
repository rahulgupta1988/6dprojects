package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "COMMENTS".
 */
public class CommentsDao extends AbstractDao<Comments, Void> {

    public static final String TABLENAME = "COMMENTS";

    /**
     * Properties of entity Comments.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Recognition_id = new Property(0, String.class, "recognition_id", false, "RECOGNITION_ID");
        public final static Property Commentid = new Property(1, String.class, "commentid", false, "COMMENTID");
        public final static Property Userid = new Property(2, String.class, "userid", false, "USERID");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property Designation = new Property(5, String.class, "designation", false, "DESIGNATION");
        public final static Property Department = new Property(6, String.class, "department", false, "DEPARTMENT");
        public final static Property Location = new Property(7, String.class, "location", false, "LOCATION");
        public final static Property Imageurl = new Property(8, String.class, "imageurl", false, "IMAGEURL");
        public final static Property Comments = new Property(9, String.class, "comments", false, "COMMENTS");
        public final static Property Count = new Property(10, String.class, "count", false, "COUNT");
        public final static Property Tagcount = new Property(11, String.class, "tagcount", false, "TAGCOUNT");
        public final static Property Coi_gid = new Property(12, String.class, "coi_gid", false, "COI_GID");
        public final static Property Coi_gpid = new Property(13, String.class, "coi_gpid", false, "COI_GPID");
    }

    ;


    public CommentsDao(DaoConfig config) {
        super(config);
    }

    public CommentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENTS\" (" + //
                "\"RECOGNITION_ID\" TEXT," + // 0: recognition_id
                "\"COMMENTID\" TEXT," + // 1: commentid
                "\"USERID\" TEXT," + // 2: userid
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"DATE\" TEXT," + // 4: date
                "\"DESIGNATION\" TEXT," + // 5: designation
                "\"DEPARTMENT\" TEXT," + // 6: department
                "\"LOCATION\" TEXT," + // 7: location
                "\"IMAGEURL\" TEXT," + // 8: imageurl
                "\"COMMENTS\" TEXT," + // 9: comments
                "\"COUNT\" TEXT," + // 10: count
                "\"TAGCOUNT\" TEXT," + // 11: tagcount
                "\"COI_GID\" TEXT," + // 12: coi_gid
                "\"COI_GPID\" TEXT);"); // 13: coi_gpid
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENTS\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Comments entity) {
        stmt.clearBindings();

        String recognition_id = entity.getRecognition_id();
        if (recognition_id != null) {
            stmt.bindString(1, recognition_id);
        }

        String commentid = entity.getCommentid();
        if (commentid != null) {
            stmt.bindString(2, commentid);
        }

        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(3, userid);
        }

        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }

        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }

        String designation = entity.getDesignation();
        if (designation != null) {
            stmt.bindString(6, designation);
        }

        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(7, department);
        }

        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(8, location);
        }

        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(9, imageurl);
        }

        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(10, comments);
        }

        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(11, count);
        }

        String tagcount = entity.getTagcount();
        if (tagcount != null) {
            stmt.bindString(12, tagcount);
        }

        String coi_gid = entity.getCoi_gid();
        if (coi_gid != null) {
            stmt.bindString(13, coi_gid);
        }

        String coi_gpid = entity.getCoi_gpid();
        if (coi_gpid != null) {
            stmt.bindString(14, coi_gpid);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Comments readEntity(Cursor cursor, int offset) {
        Comments entity = new Comments( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // recognition_id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // commentid
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userid
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // designation
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // department
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // location
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // imageurl
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // comments
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // count
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tagcount
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // coi_gid
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // coi_gpid
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Comments entity, int offset) {
        entity.setRecognition_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCommentid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDesignation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDepartment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLocation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImageurl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComments(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCount(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTagcount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCoi_gid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCoi_gpid(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(Comments entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(Comments entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
