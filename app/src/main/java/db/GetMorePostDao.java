package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GET_MORE_POST".
 */
public class GetMorePostDao extends AbstractDao<GetMorePost, String> {

    public static final String TABLENAME = "GET_MORE_POST";

    /**
     * Properties of entity GetMorePost.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Userid = new Property(0, String.class, "userid", false, "USERID");
        public final static Property Nominator_name = new Property(1, String.class, "nominator_name", false, "NOMINATOR_NAME");
        public final static Property Nominator_designation = new Property(2, String.class, "nominator_designation", false, "NOMINATOR_DESIGNATION");
        public final static Property Nominator_location = new Property(3, String.class, "nominator_location", false, "NOMINATOR_LOCATION");
        public final static Property Nominator_imageurl = new Property(4, String.class, "nominator_imageurl", false, "NOMINATOR_IMAGEURL");
        public final static Property Nominee_name = new Property(5, String.class, "nominee_name", false, "NOMINEE_NAME");
        public final static Property Nominee_designation = new Property(6, String.class, "nominee_designation", false, "NOMINEE_DESIGNATION");
        public final static Property Nominee_location = new Property(7, String.class, "nominee_location", false, "NOMINEE_LOCATION");
        public final static Property Nominee_imageurl = new Property(8, String.class, "nominee_imageurl", false, "NOMINEE_IMAGEURL");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(10, String.class, "description", false, "DESCRIPTION");
        public final static Property Details = new Property(11, String.class, "details", false, "DETAILS");
        public final static Property Challengesfaced = new Property(12, String.class, "challengesfaced", false, "CHALLENGESFACED");
        public final static Property Is_story = new Property(13, String.class, "is_story", false, "IS_STORY");
        public final static Property Recognise_date = new Property(14, String.class, "recognise_date", false, "RECOGNISE_DATE");
        public final static Property Event_date = new Property(15, String.class, "event_date", false, "EVENT_DATE");
        public final static Property Type = new Property(16, String.class, "type", false, "TYPE");
        public final static Property Url = new Property(17, String.class, "url", false, "URL");
        public final static Property Icon = new Property(18, String.class, "icon", false, "ICON");
        public final static Property Count = new Property(19, String.class, "count", false, "COUNT");
        public final static Property Likes = new Property(20, String.class, "likes", false, "LIKES");
        public final static Property Comments = new Property(21, String.class, "comments", false, "COMMENTS");
        public final static Property Ulikes = new Property(22, String.class, "ulikes", false, "ULIKES");
        public final static Property Ucomments = new Property(23, String.class, "ucomments", false, "UCOMMENTS");
        public final static Property Recognition_id = new Property(24, String.class, "recognition_id", true, "RECOGNITION_ID");
        public final static Property Nominee = new Property(25, String.class, "nominee", false, "NOMINEE");
        public final static Property Subject = new Property(26, String.class, "subject", false, "SUBJECT");
        public final static Property Isxpress = new Property(27, String.class, "isxpress", false, "ISXPRESS");
        public final static Property Awardid = new Property(28, String.class, "awardid", false, "AWARDID");
        public final static Property Date = new Property(29, String.class, "date", false, "DATE");
        public final static Property IsNomineeDonor = new Property(30, String.class, "isNomineeDonor", false, "IS_NOMINEE_DONOR");
        public final static Property IsNominatorDonar = new Property(31, String.class, "isNominatorDonar", false, "IS_NOMINATOR_DONAR");
        public final static Property Taguserid = new Property(32, String.class, "taguserid", false, "TAGUSERID");
        public final static Property Tagcount = new Property(33, String.class, "tagcount", false, "TAGCOUNT");
    }

    ;


    public GetMorePostDao(DaoConfig config) {
        super(config);
    }

    public GetMorePostDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"GET_MORE_POST\" (" + //
                "\"USERID\" TEXT," + // 0: userid
                "\"NOMINATOR_NAME\" TEXT," + // 1: nominator_name
                "\"NOMINATOR_DESIGNATION\" TEXT," + // 2: nominator_designation
                "\"NOMINATOR_LOCATION\" TEXT," + // 3: nominator_location
                "\"NOMINATOR_IMAGEURL\" TEXT," + // 4: nominator_imageurl
                "\"NOMINEE_NAME\" TEXT," + // 5: nominee_name
                "\"NOMINEE_DESIGNATION\" TEXT," + // 6: nominee_designation
                "\"NOMINEE_LOCATION\" TEXT," + // 7: nominee_location
                "\"NOMINEE_IMAGEURL\" TEXT," + // 8: nominee_imageurl
                "\"TITLE\" TEXT," + // 9: title
                "\"DESCRIPTION\" TEXT," + // 10: description
                "\"DETAILS\" TEXT," + // 11: details
                "\"CHALLENGESFACED\" TEXT," + // 12: challengesfaced
                "\"IS_STORY\" TEXT," + // 13: is_story
                "\"RECOGNISE_DATE\" TEXT," + // 14: recognise_date
                "\"EVENT_DATE\" TEXT," + // 15: event_date
                "\"TYPE\" TEXT," + // 16: type
                "\"URL\" TEXT," + // 17: url
                "\"ICON\" TEXT," + // 18: icon
                "\"COUNT\" TEXT," + // 19: count
                "\"LIKES\" TEXT," + // 20: likes
                "\"COMMENTS\" TEXT," + // 21: comments
                "\"ULIKES\" TEXT," + // 22: ulikes
                "\"UCOMMENTS\" TEXT," + // 23: ucomments
                "\"RECOGNITION_ID\" TEXT PRIMARY KEY NOT NULL ," + // 24: recognition_id
                "\"NOMINEE\" TEXT," + // 25: nominee
                "\"SUBJECT\" TEXT," + // 26: subject
                "\"ISXPRESS\" TEXT," + // 27: isxpress
                "\"AWARDID\" TEXT," + // 28: awardid
                "\"DATE\" TEXT," + // 29: date
                "\"IS_NOMINEE_DONOR\" TEXT," + // 30: isNomineeDonor
                "\"IS_NOMINATOR_DONAR\" TEXT," + // 31: isNominatorDonar
                "\"TAGUSERID\" TEXT," + // 32: taguserid
                "\"TAGCOUNT\" TEXT);"); // 33: tagcount
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GET_MORE_POST\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, GetMorePost entity) {
        stmt.clearBindings();

        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }

        String nominator_name = entity.getNominator_name();
        if (nominator_name != null) {
            stmt.bindString(2, nominator_name);
        }

        String nominator_designation = entity.getNominator_designation();
        if (nominator_designation != null) {
            stmt.bindString(3, nominator_designation);
        }

        String nominator_location = entity.getNominator_location();
        if (nominator_location != null) {
            stmt.bindString(4, nominator_location);
        }

        String nominator_imageurl = entity.getNominator_imageurl();
        if (nominator_imageurl != null) {
            stmt.bindString(5, nominator_imageurl);
        }

        String nominee_name = entity.getNominee_name();
        if (nominee_name != null) {
            stmt.bindString(6, nominee_name);
        }

        String nominee_designation = entity.getNominee_designation();
        if (nominee_designation != null) {
            stmt.bindString(7, nominee_designation);
        }

        String nominee_location = entity.getNominee_location();
        if (nominee_location != null) {
            stmt.bindString(8, nominee_location);
        }

        String nominee_imageurl = entity.getNominee_imageurl();
        if (nominee_imageurl != null) {
            stmt.bindString(9, nominee_imageurl);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(11, description);
        }

        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(12, details);
        }

        String challengesfaced = entity.getChallengesfaced();
        if (challengesfaced != null) {
            stmt.bindString(13, challengesfaced);
        }

        String is_story = entity.getIs_story();
        if (is_story != null) {
            stmt.bindString(14, is_story);
        }

        String recognise_date = entity.getRecognise_date();
        if (recognise_date != null) {
            stmt.bindString(15, recognise_date);
        }

        String event_date = entity.getEvent_date();
        if (event_date != null) {
            stmt.bindString(16, event_date);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(17, type);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(18, url);
        }

        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(19, icon);
        }

        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(20, count);
        }

        String likes = entity.getLikes();
        if (likes != null) {
            stmt.bindString(21, likes);
        }

        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(22, comments);
        }

        String ulikes = entity.getUlikes();
        if (ulikes != null) {
            stmt.bindString(23, ulikes);
        }

        String ucomments = entity.getUcomments();
        if (ucomments != null) {
            stmt.bindString(24, ucomments);
        }

        String recognition_id = entity.getRecognition_id();
        if (recognition_id != null) {
            stmt.bindString(25, recognition_id);
        }

        String nominee = entity.getNominee();
        if (nominee != null) {
            stmt.bindString(26, nominee);
        }

        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(27, subject);
        }

        String isxpress = entity.getIsxpress();
        if (isxpress != null) {
            stmt.bindString(28, isxpress);
        }

        String awardid = entity.getAwardid();
        if (awardid != null) {
            stmt.bindString(29, awardid);
        }

        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(30, date);
        }

        String isNomineeDonor = entity.getIsNomineeDonor();
        if (isNomineeDonor != null) {
            stmt.bindString(31, isNomineeDonor);
        }

        String isNominatorDonar = entity.getIsNominatorDonar();
        if (isNominatorDonar != null) {
            stmt.bindString(32, isNominatorDonar);
        }

        String taguserid = entity.getTaguserid();
        if (taguserid != null) {
            stmt.bindString(33, taguserid);
        }

        String tagcount = entity.getTagcount();
        if (tagcount != null) {
            stmt.bindString(34, tagcount);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24);
    }

    /**
     * @inheritdoc
     */
    @Override
    public GetMorePost readEntity(Cursor cursor, int offset) {
        GetMorePost entity = new GetMorePost( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userid
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nominator_name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nominator_designation
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nominator_location
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nominator_imageurl
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nominee_name
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nominee_designation
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nominee_location
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nominee_imageurl
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // description
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // details
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // challengesfaced
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // is_story
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // recognise_date
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // event_date
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // type
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // url
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // icon
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // count
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // likes
                cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // comments
                cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ulikes
                cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ucomments
                cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // recognition_id
                cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // nominee
                cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // subject
                cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // isxpress
                cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // awardid
                cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // date
                cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // isNomineeDonor
                cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // isNominatorDonar
                cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // taguserid
                cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // tagcount
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, GetMorePost entity, int offset) {
        entity.setUserid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNominator_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNominator_designation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNominator_location(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNominator_imageurl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNominee_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNominee_designation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNominee_location(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNominee_imageurl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDescription(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDetails(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setChallengesfaced(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIs_story(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRecognise_date(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEvent_date(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUrl(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIcon(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCount(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLikes(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setComments(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUlikes(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUcomments(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRecognition_id(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setNominee(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSubject(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIsxpress(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setAwardid(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setDate(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setIsNomineeDonor(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setIsNominatorDonar(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setTaguserid(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setTagcount(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(GetMorePost entity, long rowId) {
        return entity.getRecognition_id();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(GetMorePost entity) {
        if (entity != null) {
            return entity.getRecognition_id();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
