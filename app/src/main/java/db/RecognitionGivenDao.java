package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RECOGNITION_GIVEN".
 */
public class RecognitionGivenDao extends AbstractDao<RecognitionGiven, Void> {

    public static final String TABLENAME = "RECOGNITION_GIVEN";

    /**
     * Properties of entity RecognitionGiven.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Awardid = new Property(0, String.class, "awardid", false, "AWARDID");
        public final static Property AwardName = new Property(1, String.class, "awardName", false, "AWARD_NAME");
        public final static Property Count = new Property(2, String.class, "count", false, "COUNT");
        public final static Property Total = new Property(3, String.class, "total", false, "TOTAL");
    }

    ;


    public RecognitionGivenDao(DaoConfig config) {
        super(config);
    }

    public RecognitionGivenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECOGNITION_GIVEN\" (" + //
                "\"AWARDID\" TEXT," + // 0: awardid
                "\"AWARD_NAME\" TEXT," + // 1: awardName
                "\"COUNT\" TEXT," + // 2: count
                "\"TOTAL\" TEXT);"); // 3: total
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECOGNITION_GIVEN\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecognitionGiven entity) {
        stmt.clearBindings();

        String awardid = entity.getAwardid();
        if (awardid != null) {
            stmt.bindString(1, awardid);
        }

        String awardName = entity.getAwardName();
        if (awardName != null) {
            stmt.bindString(2, awardName);
        }

        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(3, count);
        }

        String total = entity.getTotal();
        if (total != null) {
            stmt.bindString(4, total);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public RecognitionGiven readEntity(Cursor cursor, int offset) {
        RecognitionGiven entity = new RecognitionGiven( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // awardid
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // awardName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // count
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // total
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, RecognitionGiven entity, int offset) {
        entity.setAwardid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAwardName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTotal(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(RecognitionGiven entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(RecognitionGiven entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
