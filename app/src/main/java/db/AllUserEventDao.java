package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALL_USER_EVENT".
*/
public class AllUserEventDao extends AbstractDao<AllUserEvent, Void> {

    public static final String TABLENAME = "ALL_USER_EVENT";

    /**
     * Properties of entity AllUserEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Event_date = new Property(1, String.class, "event_date", false, "EVENT_DATE");
        public final static Property Image_url = new Property(2, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Event_desc = new Property(3, String.class, "event_desc", false, "EVENT_DESC");
        public final static Property Event_id = new Property(4, String.class, "event_id", false, "EVENT_ID");
        public final static Property Likecount = new Property(5, String.class, "likecount", false, "LIKECOUNT");
        public final static Property Commentcount = new Property(6, String.class, "commentcount", false, "COMMENTCOUNT");
        public final static Property Event_title = new Property(7, String.class, "event_title", false, "EVENT_TITLE");
        public final static Property Eventmaster_id = new Property(8, String.class, "eventmaster_id", false, "EVENTMASTER_ID");
        public final static Property Eventicon = new Property(9, String.class, "eventicon", false, "EVENTICON");
    };


    public AllUserEventDao(DaoConfig config) {
        super(config);
    }
    
    public AllUserEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALL_USER_EVENT\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"EVENT_DATE\" TEXT," + // 1: event_date
                "\"IMAGE_URL\" TEXT," + // 2: image_url
                "\"EVENT_DESC\" TEXT," + // 3: event_desc
                "\"EVENT_ID\" TEXT," + // 4: event_id
                "\"LIKECOUNT\" TEXT," + // 5: likecount
                "\"COMMENTCOUNT\" TEXT," + // 6: commentcount
                "\"EVENT_TITLE\" TEXT," + // 7: event_title
                "\"EVENTMASTER_ID\" TEXT," + // 8: eventmaster_id
                "\"EVENTICON\" TEXT);"); // 9: eventicon
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALL_USER_EVENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AllUserEvent entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String event_date = entity.getEvent_date();
        if (event_date != null) {
            stmt.bindString(2, event_date);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(3, image_url);
        }
 
        String event_desc = entity.getEvent_desc();
        if (event_desc != null) {
            stmt.bindString(4, event_desc);
        }
 
        String event_id = entity.getEvent_id();
        if (event_id != null) {
            stmt.bindString(5, event_id);
        }
 
        String likecount = entity.getLikecount();
        if (likecount != null) {
            stmt.bindString(6, likecount);
        }
 
        String commentcount = entity.getCommentcount();
        if (commentcount != null) {
            stmt.bindString(7, commentcount);
        }
 
        String event_title = entity.getEvent_title();
        if (event_title != null) {
            stmt.bindString(8, event_title);
        }
 
        String eventmaster_id = entity.getEventmaster_id();
        if (eventmaster_id != null) {
            stmt.bindString(9, eventmaster_id);
        }
 
        String eventicon = entity.getEventicon();
        if (eventicon != null) {
            stmt.bindString(10, eventicon);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AllUserEvent readEntity(Cursor cursor, int offset) {
        AllUserEvent entity = new AllUserEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // event_date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // event_desc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // event_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // likecount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // commentcount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // event_title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // eventmaster_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // eventicon
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AllUserEvent entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEvent_date(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEvent_desc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEvent_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLikecount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCommentcount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEvent_title(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEventmaster_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEventicon(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AllUserEvent entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AllUserEvent entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
