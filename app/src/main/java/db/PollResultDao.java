package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "POLL_RESULT".
 */
public class PollResultDao extends AbstractDao<PollResult, Void> {

    public static final String TABLENAME = "POLL_RESULT";

    /**
     * Properties of entity PollResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Opinionid = new Property(0, String.class, "opinionid", false, "OPINIONID");
        public final static Property Question = new Property(1, String.class, "question", false, "QUESTION");
        public final static Property Answertype = new Property(2, String.class, "answertype", false, "ANSWERTYPE");
        public final static Property Enddate = new Property(3, String.class, "enddate", false, "ENDDATE");
        public final static Property Isactive = new Property(4, String.class, "isactive", false, "ISACTIVE");
        public final static Property Agree_perc = new Property(5, String.class, "agree_perc", false, "AGREE_PERC");
        public final static Property Disagree_perc = new Property(6, String.class, "disagree_perc", false, "DISAGREE_PERC");
        public final static Property Cantsay_perc = new Property(7, String.class, "cantsay_perc", false, "CANTSAY_PERC");
        public final static Property Status = new Property(8, String.class, "status", false, "STATUS");
    }

    ;


    public PollResultDao(DaoConfig config) {
        super(config);
    }

    public PollResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"POLL_RESULT\" (" + //
                "\"OPINIONID\" TEXT," + // 0: opinionid
                "\"QUESTION\" TEXT," + // 1: question
                "\"ANSWERTYPE\" TEXT," + // 2: answertype
                "\"ENDDATE\" TEXT," + // 3: enddate
                "\"ISACTIVE\" TEXT," + // 4: isactive
                "\"AGREE_PERC\" TEXT," + // 5: agree_perc
                "\"DISAGREE_PERC\" TEXT," + // 6: disagree_perc
                "\"CANTSAY_PERC\" TEXT," + // 7: cantsay_perc
                "\"STATUS\" TEXT);"); // 8: status
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POLL_RESULT\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, PollResult entity) {
        stmt.clearBindings();

        String opinionid = entity.getOpinionid();
        if (opinionid != null) {
            stmt.bindString(1, opinionid);
        }

        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(2, question);
        }

        String answertype = entity.getAnswertype();
        if (answertype != null) {
            stmt.bindString(3, answertype);
        }

        String enddate = entity.getEnddate();
        if (enddate != null) {
            stmt.bindString(4, enddate);
        }

        String isactive = entity.getIsactive();
        if (isactive != null) {
            stmt.bindString(5, isactive);
        }

        String agree_perc = entity.getAgree_perc();
        if (agree_perc != null) {
            stmt.bindString(6, agree_perc);
        }

        String disagree_perc = entity.getDisagree_perc();
        if (disagree_perc != null) {
            stmt.bindString(7, disagree_perc);
        }

        String cantsay_perc = entity.getCantsay_perc();
        if (cantsay_perc != null) {
            stmt.bindString(8, cantsay_perc);
        }

        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public PollResult readEntity(Cursor cursor, int offset) {
        PollResult entity = new PollResult( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // opinionid
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // question
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // answertype
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // enddate
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // isactive
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // agree_perc
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // disagree_perc
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cantsay_perc
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // status
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, PollResult entity, int offset) {
        entity.setOpinionid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setQuestion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAnswertype(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEnddate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsactive(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAgree_perc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDisagree_perc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCantsay_perc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(PollResult entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(PollResult entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
