package db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 24): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 24;

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        UserLoginInfoDao.createTable(db, ifNotExists);
        AllUserEventDao.createTable(db, ifNotExists);
        UserWeddingDao.createTable(db, ifNotExists);
        AllUsersDao.createTable(db, ifNotExists);
        AllWebNotificationDao.createTable(db, ifNotExists);
        GetMorePostDao.createTable(db, ifNotExists);
        GetXpresswayPostDao.createTable(db, ifNotExists);
        RecentActivityDao.createTable(db, ifNotExists);
        CommentsDao.createTable(db, ifNotExists);
        XpresswayDao.createTable(db, ifNotExists);
        AwardDao.createTable(db, ifNotExists);
        ExpossorDao.createTable(db, ifNotExists);
        CurrentOpinionDao.createTable(db, ifNotExists);
        PollResultDao.createTable(db, ifNotExists);
        BulletinCategoryDao.createTable(db, ifNotExists);
        RecognitionGivenDao.createTable(db, ifNotExists);
        RecognitionRecievedDao.createTable(db, ifNotExists);
        RecognitionGivenListDao.createTable(db, ifNotExists);
        RecognitionRecievedListDao.createTable(db, ifNotExists);
        CelebrationMomentsDao.createTable(db, ifNotExists);
        CountRGDao.createTable(db, ifNotExists);
        GivenLikeDao.createTable(db, ifNotExists);
        BulletinListDao.createTable(db, ifNotExists);
        SrijanTOPCommentDao.createTable(db, ifNotExists);
        ClusterDao.createTable(db, ifNotExists);
        GPWALLPOSTDao.createTable(db, ifNotExists);
        XPGPWALLPOSTDao.createTable(db, ifNotExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        UserLoginInfoDao.dropTable(db, ifExists);
        AllUserEventDao.dropTable(db, ifExists);
        UserWeddingDao.dropTable(db, ifExists);
        AllUsersDao.dropTable(db, ifExists);
        AllWebNotificationDao.dropTable(db, ifExists);
        GetMorePostDao.dropTable(db, ifExists);
        GetXpresswayPostDao.dropTable(db, ifExists);
        RecentActivityDao.dropTable(db, ifExists);
        CommentsDao.dropTable(db, ifExists);
        XpresswayDao.dropTable(db, ifExists);
        AwardDao.dropTable(db, ifExists);
        ExpossorDao.dropTable(db, ifExists);
        CurrentOpinionDao.dropTable(db, ifExists);
        PollResultDao.dropTable(db, ifExists);
        BulletinCategoryDao.dropTable(db, ifExists);
        RecognitionGivenDao.dropTable(db, ifExists);
        RecognitionRecievedDao.dropTable(db, ifExists);
        RecognitionGivenListDao.dropTable(db, ifExists);
        RecognitionRecievedListDao.dropTable(db, ifExists);
        CelebrationMomentsDao.dropTable(db, ifExists);
        CountRGDao.dropTable(db, ifExists);
        GivenLikeDao.dropTable(db, ifExists);
        BulletinListDao.dropTable(db, ifExists);
        SrijanTOPCommentDao.dropTable(db, ifExists);
        ClusterDao.dropTable(db, ifExists);
        GPWALLPOSTDao.dropTable(db, ifExists);
        XPGPWALLPOSTDao.dropTable(db, ifExists);
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(UserLoginInfoDao.class);
        registerDaoClass(AllUserEventDao.class);
        registerDaoClass(UserWeddingDao.class);
        registerDaoClass(AllUsersDao.class);
        registerDaoClass(AllWebNotificationDao.class);
        registerDaoClass(GetMorePostDao.class);
        registerDaoClass(GetXpresswayPostDao.class);
        registerDaoClass(RecentActivityDao.class);
        registerDaoClass(CommentsDao.class);
        registerDaoClass(XpresswayDao.class);
        registerDaoClass(AwardDao.class);
        registerDaoClass(ExpossorDao.class);
        registerDaoClass(CurrentOpinionDao.class);
        registerDaoClass(PollResultDao.class);
        registerDaoClass(BulletinCategoryDao.class);
        registerDaoClass(RecognitionGivenDao.class);
        registerDaoClass(RecognitionRecievedDao.class);
        registerDaoClass(RecognitionGivenListDao.class);
        registerDaoClass(RecognitionRecievedListDao.class);
        registerDaoClass(CelebrationMomentsDao.class);
        registerDaoClass(CountRGDao.class);
        registerDaoClass(GivenLikeDao.class);
        registerDaoClass(BulletinListDao.class);
        registerDaoClass(SrijanTOPCommentDao.class);
        registerDaoClass(ClusterDao.class);
        registerDaoClass(GPWALLPOSTDao.class);
        registerDaoClass(XPGPWALLPOSTDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

}
