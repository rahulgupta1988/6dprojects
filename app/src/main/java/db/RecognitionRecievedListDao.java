package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RECOGNITION_RECIEVED_LIST".
 */
public class RecognitionRecievedListDao extends AbstractDao<RecognitionRecievedList, Void> {

    public static final String TABLENAME = "RECOGNITION_RECIEVED_LIST";

    /**
     * Properties of entity RecognitionRecievedList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Nominee_name = new Property(0, String.class, "nominee_name", false, "NOMINEE_NAME");
        public final static Property Nominee = new Property(1, String.class, "nominee", false, "NOMINEE");
        public final static Property Nomineedesignation = new Property(2, String.class, "nomineedesignation", false, "NOMINEEDESIGNATION");
        public final static Property Recognition_id = new Property(3, String.class, "recognition_id", false, "RECOGNITION_ID");
        public final static Property Details = new Property(4, String.class, "details", false, "DETAILS");
        public final static Property Count = new Property(5, String.class, "count", false, "COUNT");
        public final static Property Imageurl = new Property(6, String.class, "imageurl", false, "IMAGEURL");
        public final static Property Recognise_date = new Property(7, String.class, "recognise_date", false, "RECOGNISE_DATE");
        public final static Property Recognition_name = new Property(8, String.class, "recognition_name", false, "RECOGNITION_NAME");
        public final static Property Is_story = new Property(9, String.class, "is_story", false, "IS_STORY");
        public final static Property Isxpress = new Property(10, String.class, "isxpress", false, "ISXPRESS");
    }

    ;


    public RecognitionRecievedListDao(DaoConfig config) {
        super(config);
    }

    public RecognitionRecievedListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECOGNITION_RECIEVED_LIST\" (" + //
                "\"NOMINEE_NAME\" TEXT," + // 0: nominee_name
                "\"NOMINEE\" TEXT," + // 1: nominee
                "\"NOMINEEDESIGNATION\" TEXT," + // 2: nomineedesignation
                "\"RECOGNITION_ID\" TEXT," + // 3: recognition_id
                "\"DETAILS\" TEXT," + // 4: details
                "\"COUNT\" TEXT," + // 5: count
                "\"IMAGEURL\" TEXT," + // 6: imageurl
                "\"RECOGNISE_DATE\" TEXT," + // 7: recognise_date
                "\"RECOGNITION_NAME\" TEXT," + // 8: recognition_name
                "\"IS_STORY\" TEXT," + // 9: is_story
                "\"ISXPRESS\" TEXT);"); // 10: isxpress
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECOGNITION_RECIEVED_LIST\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecognitionRecievedList entity) {
        stmt.clearBindings();

        String nominee_name = entity.getNominee_name();
        if (nominee_name != null) {
            stmt.bindString(1, nominee_name);
        }

        String nominee = entity.getNominee();
        if (nominee != null) {
            stmt.bindString(2, nominee);
        }

        String nomineedesignation = entity.getNomineedesignation();
        if (nomineedesignation != null) {
            stmt.bindString(3, nomineedesignation);
        }

        String recognition_id = entity.getRecognition_id();
        if (recognition_id != null) {
            stmt.bindString(4, recognition_id);
        }

        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(5, details);
        }

        String count = entity.getCount();
        if (count != null) {
            stmt.bindString(6, count);
        }

        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(7, imageurl);
        }

        String recognise_date = entity.getRecognise_date();
        if (recognise_date != null) {
            stmt.bindString(8, recognise_date);
        }

        String recognition_name = entity.getRecognition_name();
        if (recognition_name != null) {
            stmt.bindString(9, recognition_name);
        }

        String is_story = entity.getIs_story();
        if (is_story != null) {
            stmt.bindString(10, is_story);
        }

        String isxpress = entity.getIsxpress();
        if (isxpress != null) {
            stmt.bindString(11, isxpress);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public RecognitionRecievedList readEntity(Cursor cursor, int offset) {
        RecognitionRecievedList entity = new RecognitionRecievedList( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nominee_name
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nominee
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nomineedesignation
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // recognition_id
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // details
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // count
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageurl
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // recognise_date
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // recognition_name
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // is_story
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // isxpress
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, RecognitionRecievedList entity, int offset) {
        entity.setNominee_name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNominee(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNomineedesignation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecognition_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDetails(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageurl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRecognise_date(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRecognition_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIs_story(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsxpress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(RecognitionRecievedList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(RecognitionRecievedList entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
