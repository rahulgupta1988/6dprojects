package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GIVEN_LIKE".
 */
public class GivenLikeDao extends AbstractDao<GivenLike, Void> {

    public static final String TABLENAME = "GIVEN_LIKE";

    /**
     * Properties of entity GivenLike.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Recognition_id = new Property(0, String.class, "recognition_id", false, "RECOGNITION_ID");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Designation = new Property(3, String.class, "designation", false, "DESIGNATION");
        public final static Property Department = new Property(4, String.class, "department", false, "DEPARTMENT");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property Imageurl = new Property(6, String.class, "imageurl", false, "IMAGEURL");
    }

    ;


    public GivenLikeDao(DaoConfig config) {
        super(config);
    }

    public GivenLikeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"GIVEN_LIKE\" (" + //
                "\"RECOGNITION_ID\" TEXT," + // 0: recognition_id
                "\"USERID\" TEXT," + // 1: userid
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"DESIGNATION\" TEXT," + // 3: designation
                "\"DEPARTMENT\" TEXT," + // 4: department
                "\"LOCATION\" TEXT," + // 5: location
                "\"IMAGEURL\" TEXT);"); // 6: imageurl
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GIVEN_LIKE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, GivenLike entity) {
        stmt.clearBindings();

        String recognition_id = entity.getRecognition_id();
        if (recognition_id != null) {
            stmt.bindString(1, recognition_id);
        }

        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }

        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }

        String designation = entity.getDesignation();
        if (designation != null) {
            stmt.bindString(4, designation);
        }

        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(5, department);
        }

        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }

        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(7, imageurl);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public GivenLike readEntity(Cursor cursor, int offset) {
        GivenLike entity = new GivenLike( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // recognition_id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // designation
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // department
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // imageurl
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, GivenLike entity, int offset) {
        entity.setRecognition_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDesignation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageurl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(GivenLike entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(GivenLike entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
