package db;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table "AWARD".
 */
public class Award {

    private String awardid;
    private String awardname;
    private String awardicon;
    private String isactive;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient AwardDao myDao;

    private List<Expossor> expossorList;

    public Award() {
    }

    public Award(String awardid) {
        this.awardid = awardid;
    }

    public Award(String awardid, String awardname, String awardicon, String isactive) {
        this.awardid = awardid;
        this.awardname = awardname;
        this.awardicon = awardicon;
        this.isactive = isactive;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAwardDao() : null;
    }

    public String getAwardid() {
        return awardid;
    }

    public void setAwardid(String awardid) {
        this.awardid = awardid;
    }

    public String getAwardname() {
        return awardname;
    }

    public void setAwardname(String awardname) {
        this.awardname = awardname;
    }

    public String getAwardicon() {
        return awardicon;
    }

    public void setAwardicon(String awardicon) {
        this.awardicon = awardicon;
    }

    public String getIsactive() {
        return isactive;
    }

    public void setIsactive(String isactive) {
        this.isactive = isactive;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<Expossor> getExpossorList() {
        if (expossorList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ExpossorDao targetDao = daoSession.getExpossorDao();
            List<Expossor> expossorListNew = targetDao._queryAward_ExpossorList(awardid);
            synchronized (this) {
                if (expossorList == null) {
                    expossorList = expossorListNew;
                }
            }
        }
        return expossorList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetExpossorList() {
        expossorList = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
